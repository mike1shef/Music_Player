// Generated by view binder compiler. Do not edit!
package org.hyperskill.musicplayer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.hyperskill.musicplayer.R;

public final class ListItemSongBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageButton songItemImgBtnPlayPause;

  @NonNull
  public final TextView songItemTvArtist;

  @NonNull
  public final TextView songItemTvDuration;

  @NonNull
  public final TextView songItemTvTitle;

  private ListItemSongBinding(@NonNull RelativeLayout rootView,
      @NonNull ImageButton songItemImgBtnPlayPause, @NonNull TextView songItemTvArtist,
      @NonNull TextView songItemTvDuration, @NonNull TextView songItemTvTitle) {
    this.rootView = rootView;
    this.songItemImgBtnPlayPause = songItemImgBtnPlayPause;
    this.songItemTvArtist = songItemTvArtist;
    this.songItemTvDuration = songItemTvDuration;
    this.songItemTvTitle = songItemTvTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemSongBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemSongBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item_song, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemSongBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.songItemImgBtnPlayPause;
      ImageButton songItemImgBtnPlayPause = ViewBindings.findChildViewById(rootView, id);
      if (songItemImgBtnPlayPause == null) {
        break missingId;
      }

      id = R.id.songItemTvArtist;
      TextView songItemTvArtist = ViewBindings.findChildViewById(rootView, id);
      if (songItemTvArtist == null) {
        break missingId;
      }

      id = R.id.songItemTvDuration;
      TextView songItemTvDuration = ViewBindings.findChildViewById(rootView, id);
      if (songItemTvDuration == null) {
        break missingId;
      }

      id = R.id.songItemTvTitle;
      TextView songItemTvTitle = ViewBindings.findChildViewById(rootView, id);
      if (songItemTvTitle == null) {
        break missingId;
      }

      return new ListItemSongBinding((RelativeLayout) rootView, songItemImgBtnPlayPause,
          songItemTvArtist, songItemTvDuration, songItemTvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
