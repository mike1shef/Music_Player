// Generated by view binder compiler. Do not edit!
package org.hyperskill.musicplayer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.hyperskill.musicplayer.R;

public final class ListItemSongSelectorBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final CheckBox songSelectorItemCheckBox;

  @NonNull
  public final TextView songSelectorItemTvArtist;

  @NonNull
  public final TextView songSelectorItemTvDuration;

  @NonNull
  public final TextView songSelectorItemTvTitle;

  private ListItemSongSelectorBinding(@NonNull RelativeLayout rootView,
      @NonNull CheckBox songSelectorItemCheckBox, @NonNull TextView songSelectorItemTvArtist,
      @NonNull TextView songSelectorItemTvDuration, @NonNull TextView songSelectorItemTvTitle) {
    this.rootView = rootView;
    this.songSelectorItemCheckBox = songSelectorItemCheckBox;
    this.songSelectorItemTvArtist = songSelectorItemTvArtist;
    this.songSelectorItemTvDuration = songSelectorItemTvDuration;
    this.songSelectorItemTvTitle = songSelectorItemTvTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemSongSelectorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemSongSelectorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item_song_selector, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemSongSelectorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.songSelectorItemCheckBox;
      CheckBox songSelectorItemCheckBox = ViewBindings.findChildViewById(rootView, id);
      if (songSelectorItemCheckBox == null) {
        break missingId;
      }

      id = R.id.songSelectorItemTvArtist;
      TextView songSelectorItemTvArtist = ViewBindings.findChildViewById(rootView, id);
      if (songSelectorItemTvArtist == null) {
        break missingId;
      }

      id = R.id.songSelectorItemTvDuration;
      TextView songSelectorItemTvDuration = ViewBindings.findChildViewById(rootView, id);
      if (songSelectorItemTvDuration == null) {
        break missingId;
      }

      id = R.id.songSelectorItemTvTitle;
      TextView songSelectorItemTvTitle = ViewBindings.findChildViewById(rootView, id);
      if (songSelectorItemTvTitle == null) {
        break missingId;
      }

      return new ListItemSongSelectorBinding((RelativeLayout) rootView, songSelectorItemCheckBox,
          songSelectorItemTvArtist, songSelectorItemTvDuration, songSelectorItemTvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
